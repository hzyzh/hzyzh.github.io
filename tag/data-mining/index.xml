<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Mining | Academic</title>
    <link>https://hzyzh.github.io/tag/data-mining/</link>
      <atom:link href="https://hzyzh.github.io/tag/data-mining/index.xml" rel="self" type="application/rss+xml" />
    <description>Data Mining</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 22 Feb 2022 16:33:17 +0000</lastBuildDate>
    <image>
      <url>https://hzyzh.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Data Mining</title>
      <link>https://hzyzh.github.io/tag/data-mining/</link>
    </image>
    
    <item>
      <title>data_mining</title>
      <link>https://hzyzh.github.io/post/notes-datamining/</link>
      <pubDate>Tue, 22 Feb 2022 16:33:17 +0000</pubDate>
      <guid>https://hzyzh.github.io/post/notes-datamining/</guid>
      <description>&lt;h2 id=&#34;ch1-introduction&#34;&gt;Ch1. Introduction&lt;/h2&gt;
&lt;h3 id=&#34;data-mining&#34;&gt;data mining&lt;/h3&gt;
&lt;p&gt;从大数据库中挖掘有用的信息，然后用它来做重要决策&lt;/p&gt;
&lt;p&gt;初始数据可能无法直接使用，需要先：collect，clean，transform into a standardized format&lt;/p&gt;
&lt;p&gt;data mining的四个super-problems： association pattern mining，clustering，classification，outlier detection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classification：分类任务
&lt;ul&gt;
&lt;li&gt;有标签（class label）&lt;/li&gt;
&lt;li&gt;classification 和 regression（回归：标签是一个值） 都是supervised learning task
&lt;ul&gt;
&lt;li&gt;supervision：指特殊列（data matrix中，即标签）被用来direct the data mining process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;classification methods：
&lt;ul&gt;
&lt;li&gt;支持向量机（support vector machines）&lt;/li&gt;
&lt;li&gt;K-nearest neighbor classification（KNN）K-近邻算法：
&lt;ul&gt;
&lt;li&gt;就是先（随机？）取若干个点，将离他们最近的k个样本点分别划入对应的区域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;决策树（decision trees）&lt;/li&gt;
&lt;li&gt;rule-based classifier：不知道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以视为有监督版本的clustering！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;clustering
&lt;ul&gt;
&lt;li&gt;将数据集分为多个子集，每个子集在属性值相关，各个子集比较相似&lt;/li&gt;
&lt;li&gt;$\textcolor{red}{当一行的某一属性与其他行的该属性显著不同时}$，$\textcolor{red}{它被视为一个anomaly，问题也变为了outlier; analysis}$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;anomaly detection（outlier detection / novelty detection）&lt;/li&gt;
&lt;li&gt;association pattern mining
&lt;ul&gt;
&lt;li&gt;最初版本：data matrix的值只取0或1（可以推广至数值/枚举型属性值）&lt;/li&gt;
&lt;li&gt;frequent pattern mining problem：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ch2-data-preparation&#34;&gt;Ch2. Data Preparation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;data preparation phase：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;featrue extraction and protability(数据类型转换)&lt;/li&gt;
&lt;li&gt;data cleaning(清除错误数据，inconsistent不一致的数据（即在不同地方不完全匹配），还有缺失的数据可能被重新估计出来？)&lt;/li&gt;
&lt;li&gt;data reduction, selection, transformation&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multidimensional data vs complex data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID：one distribution， each point is independent on others？（mul）each point is generated from the same （unknown） distribution！&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四种基本的数据模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nominal（名义的） data：如城市、物种&lt;/li&gt;
&lt;li&gt;ordinal（顺序的） data：如速度快慢（快、中、慢）（非连续的，有限的？）&lt;/li&gt;
&lt;li&gt;interval data：有大小关系，且是数值，没有最小！&lt;/li&gt;
&lt;li&gt;ratio data：interval data，有最小！（绝对0）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data portability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种数据类型 可转换成其他数据类型 的能力（保持性质）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Haar Wavelet Transform？？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将一个time series（非id的？） 不断二分并获得coefficient，得到id的数据？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDS（graphs$\to$ numeric multidimensional）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不会&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarity graph（any type$\to$ graphs）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ch3-similarity&#34;&gt;Ch3. Similarity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;distance vs similarity
&lt;ul&gt;
&lt;li&gt;数据散点图上的距离，不能简单的代表两个数据的similarity！（因为distribution，我们只关心有数据的范围；还有varied local density）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mahalanobis distance&lt;/strong&gt;：stretch a dimension（/direction？）&lt;/li&gt;
&lt;li&gt;follow the data path！找到从A到B最近的一条path，来表示两者的similarity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Text Similarity Measure
&lt;ul&gt;
&lt;li&gt;Dynamic Time Warping Distance（DTW）
&lt;ul&gt;
&lt;li&gt;两个series建立 一对一的 同length 映射（将一些点延长？）分成若干个segment，每个segment匹配，时间作为contextual attribute，具体值不关键，主要关心order！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kernel choice：
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kernel function：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数据点 从一个特征平面 mapping 到另一个特征平面！&lt;/li&gt;
&lt;li&gt;例如D是数据集，则一个kernel function k可能：$D\times D\to R$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了take data distribution into consideration！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple Kernel Learning – reduce the risk of choosing an unsuitable kernel by using multiple kernels (learn weights)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distance metric learning – adapt similarity measurements to the task automatically from data (space transformation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Produce data dependent kernel directly from data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\star$ Isolation Kernel：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先从样本中随机取t个样本点，用它们将数据分布划分为t个区域（完全依赖于数据分布，与其他信息无关！）（用isolation forest的方法），重复多次，获得对原数据分布的多个划分？然后计算两个点的距离就是看它们在多少个划分里被划分进了同一区域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ch4-data-mining-algorithm&#34;&gt;Ch4. Data Mining Algorithm&lt;/h2&gt;
&lt;p&gt;就是模型的训练过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transaction：表示data？；itemsets：output？&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;classification problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;决策树算法
&lt;ul&gt;
&lt;li&gt;节点 属性值的选取标准：
&lt;ul&gt;
&lt;li&gt;information gain：difference between the amount of information needed to determine the class？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set-covering算法：
&lt;ul&gt;
&lt;li&gt;基于rule-base classification&lt;/li&gt;
&lt;li&gt;每次学习一个rule，并将该rule覆盖的样本剔除，对剩下的样本继续以上操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;K-Nearest算法：直接基于原始训练数据建立模型！&lt;/li&gt;
&lt;li&gt;Support Vector Machines（SVM）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clustering problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k-means clustering&lt;/li&gt;
&lt;li&gt;DBSCAN：首先获得数据样本分布，然后有一个threshold，高于它的连接的样本点为一个cluster&lt;/li&gt;
&lt;li&gt;Spectral clustering：
&lt;ul&gt;
&lt;li&gt;1.any data type $\to$ similarity graph;&lt;/li&gt;
&lt;li&gt;2.similarity graph $\to$ graph embedding in multidimensional data?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;outlier problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kth-nearest neighbor：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个点找k个最近的数据点，根据这k个点决定是否为outlier！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isolation forest：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建一个二叉树（孤立森林）：最终将每个样本点都独立出来
&lt;ul&gt;
&lt;li&gt;如何做？随机选取一个超平面（将样本点二分！）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;outlier总是很容易区分，对应较短的path！&lt;/li&gt;
&lt;li&gt;重复多次以上步骤，统计每个样本点的average path length：短的更可能是outlier！&lt;/li&gt;
&lt;li&gt;需要subsampling：（即先对总样本随机取子集）缓解swamping effect和masking effect
&lt;ul&gt;
&lt;li&gt;masking effect：一个outlier未被检测出来（因为旁边的其他outlier点）&lt;/li&gt;
&lt;li&gt;swamping effect：一个正常的数据点被认为是outlier（因为旁边的其他正常数据子集）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDK：估算任意两点/点和整个数据集D 之间的similarity（来进行anomaly detection）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kernel mean embedding：就是给定一个定义于$\Omega$，数据分布P，kernel function k（$\Omega\times \Omega$），一个随机变量X的kernel mean embedding就是它在该数据分布上，k的平均值！















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./equation.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键是：转换成了distributional kernel！$\hat{K}(P_S,P_T)\approx&amp;lt;\hat{\phi}(P_S),\hat{\phi}(P_T)&amp;gt;$，其中S,T为数据集，P表示该数据集的分布distribution！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;frequent pattern mining&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enumeration tree&lt;/li&gt;
&lt;li&gt;apriori algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ch5-spatial-data-mining&#34;&gt;Ch5. Spatial data mining&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spatial data：非id的！（但是可以通过一些方法（ch2）转换为id的）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spatialtemporal data：包含temporal component（时间的？）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;contextual / behavioral attribute：contextual 提供背景/参考的属性，例如：测量海平面气温（这是behavioral attribute）时，地理位置、时间 都可以是contextual attribute！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spatial data基本上都是作为contextual attribute的！轨迹图trajectory例外（只有时间时contextual）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shape $\to$ time series：通过顺时针/逆时针扫描一遍，大小为中心距离&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免shape rotation（同一图形不同旋转得到不同time series）：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DTW&lt;/strong&gt;：similarity measure for 序列数据/trajectore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DTW与behavioral attribute的属性无关&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ch6-graph-mining&#34;&gt;Ch6. Graph Mining&lt;/h2&gt;
&lt;p&gt;Graph Edit Distance: $Edit(G1,G2)$=通过一系列操作（+点，-点，label替换，+边，-边），将G1转换为G2的最少步数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Frequent Substructure-Based Transformation and Distance Computation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Topological Descriptors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kernel-Based Transformations and Computation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（m to the power of n：m的n次方）&lt;/p&gt;
&lt;h4 id=&#34;kernel&#34;&gt;kernel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Random Walk kernel：















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig2.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;只需在product graph上walk即可，因为这就是所有可能的相似路径了！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k-medoids：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WL-kernel， IGK-kernel&lt;/p&gt;
&lt;h2 id=&#34;ch7-mining-discrete-sequences&#34;&gt;Ch7. Mining Discrete Sequences&lt;/h2&gt;
&lt;p&gt;bag-of-words(BOG) model：首先分解为frequent pattern，统计各pattern的出现次数，顺序无关（视为一个大集合）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HMM：
&lt;ul&gt;
&lt;li&gt;hidden markov model：
&lt;ul&gt;
&lt;li&gt;隐藏状态$S\in{1,&amp;hellip;,I}$；观测值$O\in{y_1,&amp;hellip;,y_K}$；&lt;/li&gt;
&lt;li&gt;隐藏状态$S_t$仅依赖于前一个隐藏状态$S_{t-1}$，观测值$O_t$仅依赖于当前隐藏状态$S_t$&lt;/li&gt;
&lt;li&gt;hidden markov model可表示为一个三元组：（A,B,$\Pi$）：隐藏状态转移矩阵（$A_{ij}$表示从状态i转移到状态j的概率），观测矩阵（由状态i得到观测值j的概率），和初始状态概率矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
