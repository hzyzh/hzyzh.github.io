<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Testing | Academic</title>
    <link>https://hzyzh.github.io/tag/software-testing/</link>
      <atom:link href="https://hzyzh.github.io/tag/software-testing/index.xml" rel="self" type="application/rss+xml" />
    <description>Software Testing</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 27 Sep 2022 10:02:26 +0000</lastBuildDate>
    <image>
      <url>https://hzyzh.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Software Testing</title>
      <link>https://hzyzh.github.io/tag/software-testing/</link>
    </image>
    
    <item>
      <title>Software Testing</title>
      <link>https://hzyzh.github.io/post/notes-softwaretesting/</link>
      <pubDate>Tue, 27 Sep 2022 10:02:26 +0000</pubDate>
      <guid>https://hzyzh.github.io/post/notes-softwaretesting/</guid>
      <description>&lt;h2 id=&#34;ch-2-白盒测试-vs-黑盒测试&#34;&gt;Ch. 2 白盒测试 vs 黑盒测试&lt;/h2&gt;
&lt;h4 id=&#34;白盒测试&#34;&gt;白盒测试&lt;/h4&gt;
&lt;p&gt;允许测试人员利用程序&lt;strong&gt;内部的逻辑结构&lt;/strong&gt;设计测试用例，对程序所有逻辑路径进行测试。&lt;/p&gt;
&lt;p&gt;测试对象基于被测试程序的&lt;strong&gt;源代码&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;白盒测试方法必须遵循以下原则&#34;&gt;白盒测试方法必须遵循以下原则&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;保证一个模块中的&lt;strong&gt;所有独立路径至少被测试一次&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对所有的逻辑判定均需测试&lt;strong&gt;取真和取假&lt;/strong&gt;两种情况。&lt;/li&gt;
&lt;li&gt;在上下边界及可操作范围内运行所有循环。&lt;/li&gt;
&lt;li&gt;检查程序的内部数据结构，保证其结构的有效性&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;白盒测试类别&#34;&gt;白盒测试类别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态测试： 不要求在计算机上实际执行所测试的程序，主要以一些人工的模拟技术对软件进行分析和测试，如代码检查法、静态结构分析法等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态测试： 是通过输入一组预先按照一定的测试准则构造实际数据来动态运行程序，达到发现程序错误的过程。白盒测试中的动态分析技术主要有逻辑覆盖法和基本路径测试法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;代码结构覆盖&#34;&gt;代码结构覆盖&lt;/h5&gt;
&lt;img src=&#34;..\figs\fig94.png&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;修改决策条件覆盖？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;黑盒测试&#34;&gt;黑盒测试&lt;/h4&gt;
&lt;p&gt;完全不考虑程序的内部结构和处理过程的前提下，只基于&lt;strong&gt;规格说明&lt;/strong&gt;来设计测试用例；又称为&lt;strong&gt;功能测试&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;等价类划分--边界值分析&#34;&gt;等价类划分 &amp;amp; 边界值分析&lt;/h5&gt;
&lt;p&gt;等价类划分：如所有符合要求的输入一类；针对违反不同规则的输入 各一类&lt;/p&gt;
&lt;h5 id=&#34;category-partition&#34;&gt;Category Partition&lt;/h5&gt;
&lt;p&gt;一个程序有许多相关属性（attribute），如程序运行的：parameters，environment objects等（根据规格说明，将程序分解为若干功能单元&lt;strong&gt;functional unit&lt;/strong&gt;）；&lt;/p&gt;
&lt;p&gt;针对每个attribute，分出若干个categories（如对于字符串长度，分为0，1，若干，超长。。。等）；&lt;/p&gt;
&lt;p&gt;generate test cases&lt;/p&gt;
&lt;h5 id=&#34;因果图和决策表&#34;&gt;因果图和决策表&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;等价类划分和边界值分析&lt;/strong&gt;都只孤立地考虑各个输入数据，而没有考虑多个输入数据间的组合效应，可能会遗漏了输入数据易于出错的组合情况&lt;/p&gt;
&lt;p&gt;因果图可以转化为决策表，表中每一列展示了原因和结果之间的关系。可以基于决策表设计对应的测试用例（例如，为表中的每一列设计一条测试用例）&lt;/p&gt;
&lt;p&gt;如：因果图&lt;img src=&#34;..\figs\fig96.png&#34; style=&#34;zoom:50%;&#34; /&gt;，&lt;/p&gt;
&lt;p&gt;对应决策表&lt;img src=&#34;..\figs\fig95.png&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ch-3-软件开发中的测试方法&#34;&gt;Ch. 3 软件开发中的测试方法&lt;/h2&gt;
&lt;h4 id=&#34;单元测试-unit-testing&#34;&gt;单元测试 Unit testing&lt;/h4&gt;
&lt;p&gt;与系统一个单一功能（logical purpose）有关的代码称为一个unit；&lt;/p&gt;
&lt;p&gt;编写一小段代码 =&amp;gt; 测试一个很小、很明确的功能正确&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用单元测试的自动化框架来自动执行单元测试用例：JUnit，NUnit，TestNG。。。&lt;/li&gt;
&lt;li&gt;会自动设置测试环境、前置条件；自动执行测试用例；对比输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集成测试-integration-testing&#34;&gt;集成测试 Integration Testing&lt;/h4&gt;
&lt;p&gt;在单元测试的基础上，采用适当的策略将已通过测试的模块组装成子系统或系统，并确保各模块组合到一起后能按既定的设计要求运行&lt;/p&gt;
&lt;h5 id=&#34;基于分解的集成decomposition-based&#34;&gt;基于分解的集成（Decomposition-based）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;自底向上（先开发底层模块）：先从原子模块开始，逐步向上组装和测试；需要 **测试驱动程序（driver）**来调用和协调各原子模块&lt;/li&gt;
&lt;li&gt;自顶向下（先开发主控制模块）：则需要 **桩程序（stub）**和 &lt;strong&gt;模拟程序（mock）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;混合策略（sandwich）：中上层自顶向下；中下层自底向上；灵活&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;基于功能集成&lt;/strong&gt;：每次集成提供一个用户可感知的具体功能&lt;/p&gt;
&lt;h4 id=&#34;系统测试-system-testing&#34;&gt;系统测试 System Testing&lt;/h4&gt;
&lt;p&gt;将整个软件系统视为一个整体来进行测试&lt;/p&gt;
&lt;h4 id=&#34;冒烟测试-smoke-test&#34;&gt;冒烟测试 Smoke Test&lt;/h4&gt;
&lt;p&gt;在每日构建完成后，对系统的基本功能进行简单的测试，是将代码更改签入到代码库之前的验证过程&lt;/p&gt;
&lt;p&gt;daily build（从头到尾编译、链接、运行一次） + smoke test （简单的测试）&lt;/p&gt;
&lt;h4 id=&#34;回归测试-regression-testing&#34;&gt;回归测试 Regression Testing&lt;/h4&gt;
&lt;p&gt;代码修改后，重新进行测试以确认修改的正确性，以及修改没有引入新的错误&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回归测试通常要求自动化，以此来降低软件开发和维护成本&lt;/li&gt;
&lt;li&gt;软件开发的各个阶段都会进行多次回归测试，新版本的连续发布会使回归测试进行的更加频繁（通常每天都需要进行若干次回归测试）&lt;/li&gt;
&lt;li&gt;回归测试会对已有的测试用例库进行增删或改进&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flaky-test&#34;&gt;Flaky Test&lt;/h4&gt;
&lt;p&gt;在相同代码版本上，多次执行同一个测试用例却观察到不同的测试结果(可能因为测试用例引入了一些随机性？)&lt;/p&gt;
&lt;h5 id=&#34;flakiness-的来源-及解决方案&#34;&gt;Flakiness 的来源 (及解决方案)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;并发和同步相关的问题 (e.g., test makes an asynchronous call and
does not wait, multiple threads interact, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;多条测试用例执行时的顺序和依赖问题 (e.g., shared variables, no
cleaning up, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;数据和资源的管理与控制问题 (e.g., database connections, memory
allocations, unordered collections, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;测试执行时间过⻓或难于控制、依赖于当前系统时间 (e.g., network, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;随机性 (e.g., random numbers generator, &amp;hellip;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;alpha-测试&#34;&gt;Alpha 测试&lt;/h4&gt;
&lt;p&gt;在开发环境或模拟的实际操作环境下进行的测试（通常依赖第三方测试机构）&lt;/p&gt;
&lt;h4 id=&#34;beta-测试&#34;&gt;Beta 测试&lt;/h4&gt;
&lt;p&gt;由软件用户在实际使用环境下进行的测试 (开发者无法控制测试环境)&lt;/p&gt;
&lt;h5 id=&#34;perpetual-beta&#34;&gt;Perpetual Beta&lt;/h5&gt;
&lt;p&gt;软件系统长期处于Beta测试中&lt;/p&gt;
&lt;h2 id=&#34;ch4-软件特性和方面的测试方法&#34;&gt;Ch4. 软件特性和方面的测试方法&lt;/h2&gt;
&lt;h4 id=&#34;针对软件效率的测试&#34;&gt;针对软件效率的测试&lt;/h4&gt;
&lt;p&gt;对于一些大规模的复杂软件系统 (Ultra Large-Scale Software Systems)，针对软件运行效率的测试非常重要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;负载测试 Load Testing：检测系统在不同负载（concurrent users？）下的表现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;评估系统在不同工作量下的行为；有些问题可能需要在高负载下显现（memory leak，deadlock等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压力测试 Stress Testing：检测系统在极限情况下的表现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过模拟负载，使系统在负载饱和或资源匮乏的状态下运行&lt;/li&gt;
&lt;li&gt;软件老化 (Aging) 缺陷：软件系统⻓时间运行中出现的可用资源不足、性能下降、失效率增加等现象 (⻓时间运行后性能下降)，通常是由于系统状态中的错误累计和系统资源 (例如，物理内存、文件等) 的消耗造成的
&lt;ul&gt;
&lt;li&gt;通过⻓时间提供大量工作负载(例如，大量客户端请求) 使软件老化现象更快暴露出来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容量测试 Volume：检测系统在大数据量或大量用户下的表现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常只关注大容量，不关注实际使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能测试 Performance：评估系统的性能指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;评估一堆性能指标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前仨&lt;strong&gt;面向缺陷&lt;/strong&gt;；性能测试则&lt;strong&gt;面向指标&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可靠性测试&#34;&gt;可靠性测试&lt;/h4&gt;
&lt;p&gt;Reliability Testing：评估软件的可靠性程度；&lt;/p&gt;
&lt;p&gt;软件可靠性是指软件在规定的时间和规定的环境下，完成规定功能的能力&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看看ppt！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;安全性测试&#34;&gt;安全性测试&lt;/h4&gt;
&lt;p&gt;检测软件安全控制机制的正确性和有效性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全功能测试：测试软件实现是否与安全需求说明一致&lt;/li&gt;
&lt;li&gt;安全漏洞测试：&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;安全性测试中的常用方法&#34;&gt;安全性测试中的常用方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对特定的攻击方式进行检查，尽早发现错误&lt;/li&gt;
&lt;li&gt;存在误报和漏报现象，需要在两者之间进行平衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;形式化方法 (e.g., Model Checking)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有完备的数学基础，能对形式化的规格说明进行正确性证明&lt;/li&gt;
&lt;li&gt;开发成本高，状态爆炸问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模糊测试 Fuzzing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法测试 Syntax Testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用户认证授权测试&#34;&gt;用户认证+授权测试&lt;/h4&gt;
&lt;p&gt;（见ppt）&lt;/p&gt;
&lt;h4 id=&#34;兼容性测试&#34;&gt;兼容性测试&lt;/h4&gt;
&lt;p&gt;检测软件能否在不同的&lt;strong&gt;硬件平台&lt;/strong&gt;、&lt;strong&gt;操作系统&lt;/strong&gt;和&lt;strong&gt;网络环境&lt;/strong&gt;之上、以及不同的应用之间正常运行&lt;/p&gt;
&lt;h4 id=&#34;配置测试&#34;&gt;配置测试&lt;/h4&gt;
&lt;p&gt;Configuration Testing：检测软件在不同构建和运行配置下是否能正常工作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高可配置软件：允许用户定义一系列配置选项而保持核心功能不变&lt;/li&gt;
&lt;li&gt;可能存在解空间爆炸的问题（一堆可选配置的组合）&lt;img src=&#34;..\figs\fig97.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;图形用户界面测试gui&#34;&gt;图形用户界面测试GUI&lt;/h4&gt;
&lt;p&gt;（每个用户操作 可能出发不同event）&lt;/p&gt;
&lt;p&gt;基于模型的测试：定义coverage概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Event Flow Graph（EFG）：每个点代表event，边代表一个用户操作
&lt;ul&gt;
&lt;li&gt;cover nodes and edges；sequences of events&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finite State Machine（FSM）：node代表一个界面/窗口？edge代表一个event&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件测试坐标系：&lt;img src=&#34;..\figs\fig98.jpg&#34; style=&#34;zoom: 25%;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ch5-random-testing&#34;&gt;Ch5. Random Testing&lt;/h2&gt;
&lt;p&gt;problem：测试空间太大，无法全测&lt;/p&gt;
&lt;img src=&#34;..\figs\fig99.png&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;issues in RT：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number好randomly sample，但复杂数据结构如何随机sample？（还有内存、时间限制）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RT sample的质量：diversity！&lt;/p&gt;
&lt;h4 id=&#34;adaptive-random-testing-art&#34;&gt;Adaptive Random Testing (ART)&lt;/h4&gt;
&lt;p&gt;Select test cases that are &lt;strong&gt;as diverse as possible&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以尝试 maximize distance between tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几种implementations：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed-Size-Candidate-Set (FSCS)&lt;img src=&#34;..\figs\fig100.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition based-ART&lt;img src=&#34;..\figs\fig101.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;evaluate-the-distribution-of-a-given-test-set&#34;&gt;evaluate the distribution of a given test set:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;distribution metric&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;discrepency:&lt;img src=&#34;..\figs\fig102.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dispersion:&lt;img src=&#34;..\figs\fig103.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;diversity:&lt;img src=&#34;..\figs\fig104.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;art-weaknesses&#34;&gt;ART Weaknesses:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;计算复杂度&lt;/li&gt;
&lt;li&gt;Boundary effect：更容易找到一堆边界处的test（实际不需要这么多）&lt;/li&gt;
&lt;li&gt;高维效果差&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;combinatorial-testing&#34;&gt;Combinatorial Testing&lt;/h3&gt;
&lt;p&gt;全部测试开销过高；且并非所有的输入参数都与fault有关 =&amp;gt; 把fixed number t个不同参数的任意种组合情况都测试了，&lt;strong&gt;t就叫该测试的coverage strength&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个例子：&lt;img src=&#34;..\figs\fig107.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CT测试步骤&lt;img src=&#34;..\figs\fig105.png&#34; style=&#34;zoom:67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如何depict input space很关键！&lt;/p&gt;
&lt;p&gt;（如要测试find命令）：&lt;img src=&#34;..\figs\fig106.png&#34; style=&#34;zoom:55%;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;ct的优点&#34;&gt;CT的优点&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;t-way CT覆盖了小于等于t个参数的所有种interaction （exhaustive）；比穷举少多了
&lt;ul&gt;
&lt;li&gt;不过随着t增大，covering array大小显著提升！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;研究证明：绝大部分fault的产生所需interaction很少&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;covering-array&#34;&gt;Covering Array&lt;/h5&gt;
&lt;p&gt;不同参数可能有不同的value domains =&amp;gt; Mixed Covering Array&lt;/p&gt;
&lt;p&gt;Sequence Covering Array：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于测试event顺序带来的影响，如：&lt;img src=&#34;..\figs\fig108.png&#34; style=&#34;zoom:55%;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;构造-t-way-covering-array&#34;&gt;构造 t-way covering array&lt;/h5&gt;
&lt;p&gt;构造minimal t-way CA是一个NP Hard的问题！一些简化方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mathematical approach
&lt;ul&gt;
&lt;li&gt;orthogonal array (OA)&lt;img src=&#34;..\figs\fig109.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;得到最优的CA，但limited for certain problem instances&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;greedy approach
&lt;ul&gt;
&lt;li&gt;In-Parameter-Order (IPO) algorithm&lt;img src=&#34;..\figs\fig110.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;运行效率高，但结果不一定最优&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;search-based approach
&lt;ul&gt;
&lt;li&gt;得到尽可能small的array，但高计算开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;ct的一些constraints&#34;&gt;CT的一些constraints&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hard constraint：并非所有parameter组合都有效（有些parameter不能同时出现）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;soft constraint：测试者认为某些parameter组合没有必要测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到t-way constrained covering array，要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA中每一行都满足约束；任意t个参数之间 满足约束 的组合至少出现一次
&lt;ul&gt;
&lt;li&gt;会引入隐性约束问题：如有约束：(P1=0,P2=0),(P2=1,P3=1) =&amp;gt; (P1=0,P3=1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;constraint solver：用来检测一个（partial）test case是否valid&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有constraints表达式用solver支持的形式表示：如boolean formula&lt;/li&gt;
&lt;li&gt;SAT/SMT&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fsm-testing&#34;&gt;FSM Testing&lt;/h2&gt;
&lt;p&gt;model-based testing：建模，将原系统 map 为一个model；是一种reduction，model仅反应系统的部分性质&lt;/p&gt;
&lt;p&gt;根据model生成一些abstract test cases =&amp;gt; executable test cases&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strongly connected：可以从FSM的任意状态s1转移到任意状态s2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般假设：FSM M是minimal，strongly connected，&lt;strong&gt;completely specified&lt;/strong&gt;；并且存在正确的reset操作（状态回到初始s）&lt;/p&gt;
&lt;p&gt;testing FSM：根据归约（原system）检测FSM，错误包括两种：&lt;strong&gt;output fault&lt;/strong&gt;，&lt;strong&gt;state transfer fault&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;finding-state-transfer-fault&#34;&gt;Finding state transfer fault&lt;/h4&gt;
&lt;p&gt;确定当前state很重要（只能靠FSM的outputs判断）&lt;/p&gt;
&lt;h5 id=&#34;distinguishing-sequence&#34;&gt;Distinguishing sequence&lt;/h5&gt;
&lt;img src=&#34;..\figs\fig111.png&#34; style=&#34;zoom:55%;&#34; /&gt;
&lt;p&gt;Distinguishing sequence是general的，还有Unique Input/Output (UIO) sequence for a state s（即所有其他状态s‘得到的输出与s的不同即可）&lt;/p&gt;
&lt;h5 id=&#34;characterizing-set&#34;&gt;Characterizing set&lt;/h5&gt;
&lt;img src=&#34;..\figs\fig112.png&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;一般方法：&lt;img src=&#34;..\figs\fig113.png&#34; style=&#34;zoom:55%;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;chows-method-w-method&#34;&gt;Chow&amp;rsquo;s Method (W-method)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;找到FSM的一个特征集W，及FSM的state cover set V（即input sequences的集合，使得从s0开始可以分别到达所有状态s）&lt;/li&gt;
&lt;li&gt;假设state数存在上限？&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;..\figs\fig114.png&#34; style=&#34;zoom:50%;&#34; /&gt;
- ·表示笛卡尔积；V·W表示到达任意某个状态s（V），然后确定当前确实在状态s（W）；V·X·W表示 从s经过任意某个state transfer（V·X），然后确定确实在正确的转移状态s‘（W）
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;constraint-based-testing&#34;&gt;Constraint Based Testing&lt;/h2&gt;
&lt;p&gt;针对控制流来设计sample&lt;img src=&#34;..\figs\fig115.png&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SAT： satisfying assignment （to Boolean Satisfiability）&lt;/p&gt;
&lt;p&gt;SMT： SAT的推广，给变量赋值&lt;/p&gt;
&lt;h4 id=&#34;symbolic-execution&#34;&gt;Symbolic Execution&lt;/h4&gt;
&lt;p&gt;用symbolic values来表示 变量 和path conditions&lt;/p&gt;
&lt;img src=&#34;..\figs\fig116.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;根据不同控制流对应的constraints， solve出符合的inputs =&amp;gt; 相当于inputs的&lt;strong&gt;等价类划分&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;..\figs\fig117.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;一些practical issues：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loops，recursion，path explosion =&amp;gt; paths过多&lt;/li&gt;
&lt;li&gt;可能调用了外部库（无源码）；或约束条件过于复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dynamic-symbolic-execution-concolic-testing&#34;&gt;Dynamic Symbolic Execution （Concolic Testing）&lt;/h4&gt;
&lt;p&gt;symbolic execution dynamically + a concrete input（简化约束求解）&lt;/p&gt;
&lt;img src=&#34;..\figs\fig118.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;需要通过实际execute来确定当前的input对应的path condition（而不只是静态求解）&lt;/li&gt;
&lt;li&gt;有了当前path condition，下一步 变换path condition中的最后一项，得到待求解的约束&lt;/li&gt;
&lt;li&gt;需要通过symbolic求解器 来变换当前input =&amp;gt; 符合待求解约束的input，再继续实际执行（第一步）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;issues：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何求解 待求解的约束，得到新input？一些些缓解办法：将难解/不能解的约束，用具体值替换，去求解另一边（能力有限）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;search-based-software-testing&#34;&gt;Search Based Software Testing&lt;/h2&gt;
&lt;img src=&#34;..\figs\fig119.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;在解空间中，对一个已有solution进行微调，并比较新solution，保留better one；重复该流程&lt;/p&gt;
&lt;p&gt;（search是）heuristic的，针对一个&lt;strong&gt;optimization problem&lt;/strong&gt;，找到一个足够好的解&lt;/p&gt;
&lt;h4 id=&#34;key-ingredients&#34;&gt;Key Ingredients&lt;/h4&gt;
&lt;h5 id=&#34;representations&#34;&gt;Representations&lt;/h5&gt;
&lt;h5 id=&#34;operators&#34;&gt;Operators&lt;/h5&gt;
&lt;p&gt;A function that evaluates the goodness of a candidate solution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fitness Landscape: fitness function的hyper surface表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Local search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如Hill Climbing算法；（每次考虑周围一部分的 solutions）&lt;/li&gt;
&lt;li&gt;容易陷入局部最优local optima&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Global search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simulated Annealing：灭火算法
&lt;ul&gt;
&lt;li&gt;温度不断降低；温度高时，解不稳定，且易采取随机运动；温度低后，随机性降低，解趋向于稳定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Genetic Algorithm：
&lt;ul&gt;
&lt;li&gt;引入selection pressure（即根据fitness functions度量），趋向于选择更优的solutions作parents&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;..\figs\fig120.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;fitness-functions&#34;&gt;Fitness Functions&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Approach Level: 偏离的控制流节点数（但没办法guide the test）&lt;/li&gt;
&lt;li&gt;Branch Distance:表示当前branch 当前输入状态 距离目标predicate之间的距离  $\in[0,1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fitness function: $f(s,i) = approach; level + normalised(brach; distance)$&lt;/p&gt;
&lt;h5 id=&#34;exploitation-vs-exploration&#34;&gt;Exploitation vs. Exploration&lt;/h5&gt;
&lt;p&gt;Exploitation: 找到当前局部最优的能力&lt;/p&gt;
&lt;p&gt;Exploration: 全局搜索的能力&lt;/p&gt;
&lt;p&gt;之间有一个tradeoff&lt;/p&gt;
&lt;h5 id=&#34;test-suite-minimization&#34;&gt;Test Suite Minimization&lt;/h5&gt;
&lt;h2 id=&#34;mutation-testing&#34;&gt;Mutation Testing&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
